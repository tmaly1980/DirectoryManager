# Macro definitions:
#
# ${fn} : First name, all lowercase letters
# ${ln} : Last name, all lowercase letters
# ${Fn} : First name, with the first letter uppercase, the rest lowercase
# ${Ln} : Last name, with first letter uppercase, the rest lowercase
# ${FN} : First name, all letters uppercase
# ${LN} : Last name, all letters uppercase
# ${fi} : First name's initial, lowercased
# ${Fi} : First name's initial, uppercased
# ${uidNum} : The next available user ID number in the system
# ${company_domain} : The domain for the company mentioned in their entry. This requires that there
# 	be a mapping from Company Name to Company Domain Name, mentioned in etc/DMCGI.conf
# 

# Multiple choice values for editing a field. Not including it here will make it a free-form text field
# Including it here will confine possible values to what is given below.
# 
# Syntax is:
# internalFieldName=>['value1','value2',...],

###########################################
#### DO NOT EDIT BELOW THIS LINE!!!!! #####
###########################################


{
	TAB=>1,
	HEADER_KEY=>"cn",
      PRIMARY_KEY=>"uid",
      OBJECT_CLASS=>"inetOrgPerson", # BASE MANDATORY CLASS
	OU=>"People",
      DISPLAY_TITLE=>"Users",
      CLASSES=>[qw/top person organizationalPerson inetOrgPerson/],
      OPTIONAL_CLASSES=> # Needed if class is optional.
      {
        posixAccount=>
	{
	  ATTRS=>[qw(uidNumber gidNumber homeDirectory loginShell gecos)],
	},
	shadowAccount=>
	{
	  ATTRS=>[qw(shadowLastChange shadowMin shadowMax shadowWarning 
	    shadowInactive shadowExpire shadowFlag)],
	},
        sambaAccount=>
	{
	  #EVAL=>"'#CONF{SAMBA}#' eq '2' or '#CONF{SAMBA}#' eq '3+2'",
	  ATTRS=>
	  [qw(
rid
lmPassword 
ntPassword 
pwdLastSet 
logonTime 
logoffTime 
kickoffTime 
pwdCanChange 
pwdMustChange 
acctFlags 
displayName 
smbHome 
homeDrive 
scriptPath 
profilePath 
userWorkstations 
primaryGroupID 
domain
	  )]
	},
	sambaSamAccount=>
	{
	  #EVAL=>"'#CONF{SAMBA}#' eq '3' or '#CONF{SAMBA}#' eq '3+2'",
	  # All attrs must be here for proper deletion.
	  ATTRS=>
	  [qw(
sambaSID
sambaLMPassword 
sambaNTPassword 
sambaPwdLastSet 
sambaLogonTime 
sambaLogoffTime 
sambaKickoffTime 
sambaPwdCanChange 
sambaPwdMustChange 
sambaAcctFlags 
displayName 
sambaHomePath 
sambaHomeDrive 
sambaLogonScript 
sambaProfilePath 
sambaUserWorkstations 
sambaPrimaryGroupSID 
sambaDomainName 
sambaMungedDial 
sambaBadPasswordCount 
sambaBadPasswordTime 
sambaPasswordHistory 
sambaLogonHours
	  )],
	},
      },
	SEARCH_FIELDS=>
      [
        "cn" => "Full Name",
        "gn" => "First Name",
        "sn" => "Last Name",
        "mail" => "Email",
        "uid" => "Username",
        "ou" => "Department",
        "o" => "Company",
        "l" => "Location",
      ],
      APPEND_FILTER=>'(!(uid=*$))',

      ENTRY_TYPES=>
      [
	address=>
	{
	  NAME=>"Address Book",
	  CLASSES=>[qw(top person organizationalPerson inetOrgPerson)],
	  SECTIONS=>[qw(general contact employment account mailList password)],
	  EVAL=>"'#ADDRESS#'",
	},
	unix=>
	{
	  NAME=>"UNIX Account",
	  CLASSES=>[qw(top person organizationalPerson inetOrgPerson posixAccount shadowAccount)],
	  SECTIONS=>[qw(general contact employment account unix mailList password)],
	  EVAL=>"'#UNIX#'",
	},
	samba2=>
	{
	  NAME=>"UNIX + Samba 2",
	  CLASSES=>[qw(top person organizationalPerson inetOrgPerson posixAccount shadowAccount sambaAccount)],
	  SECTIONS=>[qw(general contact employment account unix mailList samba password)],
	  EVAL=>"'#SAMBA2#'",
	},
	samba3=>
	{
	  NAME=>"UNIX + Samba 3",
	  CLASSES=>[qw(top person organizationalPerson inetOrgPerson posixAccount shadowAccount sambaSamAccount)],
	  SECTIONS=>[qw(general contact employment account unix mailList samba3 password)],
	  EVAL=>"'#SAMBA3#'",
	},
	samba32=>
	{
	  NAME=>"UNIX + Samba 3 + Samba 2 Compat",
	  CLASSES=>[qw(top person organizationalPerson inetOrgPerson posixAccount shadowAccount sambaAccount sambaSamAccount)],
	  SECTIONS=>[qw(general contact employment account unix mailList samba3 password)],
	  EVAL=>"'#SAMBA32#'",
	},
      ],

      SECTIONS=>
      [
	{
	  NAME=>"General Information",
	  ABBREV=>"general",
	  WRITE=>[qw(ADMIN MODERATOR SELF)],
	  WRITE_COLS=>
	  {
	    mail=>[qw(ADMIN MODERATOR)],
	  },
	  COLUMNS=>
	  [
	    "cn", "jpegPhoto",
	    "mail", "labeledURI",
	  ],
	},
	{
	  NAME=>"Contact Information",
	  ABBREV=>"contact",
	  WRITE=>[qw(ADMIN MODERATOR SELF)],
	  COLUMNS=>
	  [
	    "street", "l", 
	    "telephoneNumber", "mobile", 
	    "facsimileTelephoneNumber", "pager",
	  ],
	},
	{
	  NAME=>"Employment Information",
	  ABBREV=>"employment",
	  WRITE=>[qw(ADMIN MODERATOR)],
	  COLUMNS=>
	  [
	    "o", "title",
	    "ou", "manager",
	  ],
	},
	{
	  NAME=>"General Account",
	  ABBREV=>"account",
	  WRITE=>[qw(ADMIN)],
	  READ=>[qw(ADMIN)],
	  COLUMNS=>
	  [
	    "uid", undef
	  ],
	},
	{
	  NAME=>"UNIX Account",
	  ABBREV=>"unix",
	  WRITE=>[qw(ADMIN)],
	  READ=>[qw(ADMIN)],
	  COLUMNS=>
	  [
	    "uidNumber", "gidNumber",
	    "auxGidNumber", undef,
	    "homeDirectory", "loginShell",
	  ],
	},
	{
	  NAME=>"Mailing Lists",
	  ABBREV=>"mailList",
	  WRITE=>[qw(ADMIN)],
	  READ=>[qw(ADMIN)],
	  COLUMNS=>
	  [
	    "nisMailAlias", undef,
	  ],
	},
	{
	  NAME=>"Windows (Samba v2) Account",
	  ABBREV=>"samba",
	  READ=>[qw(ADMIN)],
	  WRITE=>[qw(ADMIN)],
	  #EVAL=>"'#CONF{SAMBA}#' ne '3+2'", # Don't show in compat mode.
	  #IF_EVAL=>"'#HAS_ADMIN_ACCESS#' and $CONF->{SAMBA}", # Also someday take into consideration license.
	  # how do we do samba 3 and not 2? always do both?
	  COLUMNS=>
	  [
	    "acctFlags", "userWorkstations",
	    "homeDrive", "smbHome",
	    "profilePath", "scriptPath",
	  ],
	},
	{
	  NAME=>"Windows (Samba v3) Account",
	  ABBREV=>"samba3",
	  READ=>[qw(ADMIN)],
	  WRITE=>[qw(ADMIN)],
	  #EVAL=>"'#CONF{SAMBA}#' ge '3'",
	  # We manage the display/edit of these purely by this. Now we need to deal with proper sync.
	  # ALSO, look into other user fields.
	  # And look into other object classes.
	  # REMEMBER about group mappings!
	  COLUMNS=>
	  [
	    "sambaAcctFlags", "sambaUserWorkstations",
	    "sambaHomeDrive", "sambaHomePath",
	    "sambaProfilePath", "sambaLogonScript",
	  ],
	},
	{
	  NAME=>"Password",
	  ABBREV=>"password",
	  WRITE=>[qw(ADMIN MODERATOR SELF)],
	  READ=>[],
	  NOVIEW=>1,
	  COLUMNS=>
	  [
	    # Somehow encorporate pseudo-stuff here, so we can use one line, 4 cols for pass.
	    "userPassword",
	    "accountLock",
	    # LATER ON, add account disable here.
	  ],

	},

      ],

      LINKS=> # for auxGidNumber et al
      {
        auxGidNumber=>
	{
	  SRCKEY=>"uid",
	  VALKEY=>["gidNumber","cn"],
	  DESTKEY=>"memberUid",
	  DESTOC=>"group",
	},
	nisMailAlias=>
	{
	  SRCKEY=>[qw(uid mail)],
	  VALKEY=>"cn",
	  DESTKEY=>"rfc822MailMember",
	  DESTOC=>"mail",
	},
      },

      CROSS_REFERENCE_VIEW=>
      {
        manager=>
        {
	  OC=>"user",
	},

      },

      IMPORT_FORMATS=>
      # SOMEWHERE this oc should define that if gecos is empty on import, load from uid
      [
        {
	  NAME=>"/etc/passwd (without password)",
	  ABBREV=>"passwdnopass",
	  COLS=>
	  [qw(
	    uid x uidNumber gidNumber gecos homeDirectory loginShell
	  )],
	},
	{
	  NAME=>"/etc/passwd (with password)",
	  ABBREV=>"passwdpass",
	  COLS=>
	  [qw(
	    uid userPassword uidNumber gidNumber gecos homeDirectory loginShell
	  )],
	},
	{
	  NAME=>"/etc/shadow",
	  ABBREV=>"shadow",
	  COLS=>
	  [qw(
	    uid userPassword shadowLastChange shadowMin shadowMax shadowWarning shadowInactive shadowExpire shadowFlag
	  )],
	},
	{
	  NAME=>"/etc/smbpasswd",
	  ABBREV=>"smbpasswd",
	  # entry type must be implicitly samba3 or samba2, etc....
	  # should have perhaps other parameter specifying entry type, if applicable.
	  COLS=>
	      [qw( uid x sambaLMPassword,lmPassword sambaNTPassword,ntPassword sambaAcctFlags,acctFlags)],
	  COLS_IF=>
	  {
	    "'#CONFIG{SAMBA}#' eq '3' or '#CONFIG{SAMBA}#' eq '3+2'" =>
	    "'#CONFIG{SAMBA}#' eq '2'" =>
	      [qw( uid x lmPassword ntPassword acctFlags)],
	  },
	},
      ],

      IMPORT_DEFAULTS=> # When importing, if key is undefined, will try to get value from one of values
      [
        gecos=>"uid", # COULD be array
	cn=>"gecos",
      ],

      TEMPLATE_ATTRS=> # Ones to keep on template saving
      [qw(
        homeDirectory_create
      )],

      NO_COMMIT_FIELDS=> # Fake ones...
      [qw(
        accountLock nisMailAlias auxGidNumber
      )],

      HEADER=>
      [
        # SHORTDISPLAY, ADMINONLY (VIEW/EDIT), MANAGERONLY, IF, CHANGEORDER (SELECT LIST WITH RE-ORDERABILITY)
	# PSEUDO (skip unless set for mode with custom display)
	# DISPLAY_SUB, MODIFY_SUB, EDIT_SUB !!!!!!!!
	# used to have SWIDTH, now CSS

        cn=>"Full Name",
        title=>"Title",
        jpegPhoto=>"Photo",
        mail=>"Email",
        labeledURI=>"Web Page",
        manager=>"Manager",
        uid=>"User Name",
        uidNumber=>"User ID#",
        gidNumber=>"Primary Group",
	auxGidNumber=>"Other Group(s)",
	homeDirectory=>"UNIX Home",
        loginShell=>"UNIX Shell",

        acctFlags=>"Windows Account Flags",
        homeDrive=>"Windows Home Drive",
        smbHome=>"Windows Home Path",
        profilePath=>"Windows Profile Path",
        scriptPath=>"Windows Logon Script",
        userWorkstations=>"Workstation Name",

        sambaAcctFlags=>"Windows Account Flags",
        sambaHomeDrive=>"Windows Home Drive",
        sambaHomePath=>"Windows Home Path",
        sambaProfilePath=>"Windows Profile Path",
        sambaLogonScript=>"Windows Logon Script",
        sambaUserWorkstations=>"Allowed Workstations",


        ou=>"Department",
        o=>"Company",
        l=>"Location",
        telephoneNumber=>"Phone",
        facsimileTelephoneNumber=>"Fax Number",
        homePhone=>"Home Phone",
        mobile=>"Mobile Phone",
        pager=>"Pager Number",
        street=>"Work Address",
        homePostalAddress=>"Home Address",

	nisMailAlias=>"Mailing Lists",

	userPassword=>"Password",
	accountLock=>"Lock/Disable Account",

      ],

      REQUEST=>
      [qw(
        cn title ou manager

      )],

      SEARCH=> # For search results.
      [qw(
        cn title telephoneNumber mail
      )],
      MULTIPLE=> # When editing.
      [qw(
        mail labeledURI manager telephoneNumber facsimileTelephoneNumber homePhone mobile pager sambaUserWorkstations userWorkstations
      )],
      REQUIRED=> # When editing. ADMIN ONLY!
      [qw(
        cn uid uidNumber gidNumber homeDirectory
      )],
      PSEUDO_FIELDS=> # Ones we generate internally from other fields....
      [qw(
	gecos sn givenName 
displayName
sambaSID rid 
sambaPrimaryGroupSID primaryGroupID 
sambaPwdMustChange pwdMustChange 
sambaPwdCanChange pwdCanChange
sambaPasswordHistory 
sambaBadPasswordCount 
sambaMungedDial 
sambaBadPasswordTime 
sambaPwdLastSet pwdLastSet
sambaNTPassword ntPassword
sambaLMPassword lmPassword 
sambaLogonTime logonTime
sambaLogoffTime logoffTime
sambaKickoffTime kickoffTime
sambaDomainName domain
sambaLogonHours 
sambaProfilePath profilePath
      )],
      PROMPT=>
      {
        manager=>"Enter in a username, full name, or LDAP DN: ",
	auxGidNumber=>"Enter in a group name or group ID number: ",

      },

      SAMBA32MAP=>
      {
        sambaLMPassword=>"lmPassword",
	sambaNTPassword=>"ntPassword",
	sambaPwdLastSet=>"pwdLastSet",
	sambaLogonTime=>"logonTime",
	sambaLogoffTime=>"logoffTime",
	sambaKickoffTime=>"kickoffTime",
	sambaPwdCanChange=>"pwdCanChange",
	sambaPwdMustChange=>"pwdMustChange",
	sambaAcctFlags=>"acctFlags",
	sambaHomePath=>"smbHome",
	sambaHomeDrive=>"homeDrive",
	sambaLogonScript=>"scriptPath",
	sambaProfilePath=>"profilePath",
	sambaUserWorkstations=>"userWorkstations",
	sambaPrimaryGroupSID=>"primaryGroupID",
	sambaDomainName=>"domain",
      },

      BULK_CHANGE=>
      {
        EXCLUDE=>[qw(jpegPhoto sambaAcctFlags acctFlags)], # Get flags working LATER!
	CHECKBOXES=>
	{
	  sambaAcctFlags=>
	  [
	    sambaAcctFlags_D=>"Disable Windows Account?",
	    sambaAcctFlags_X=>"Password Never Expires?",
	  ],
	  acctFlags=>
	  [
	    acctFlags_D=>"Disable Windows Account?",
	    acctFlags_X=>"Password Never Expires?",
	  ],
	},
	BOOLEAN=>[qw(accountLock)],
      },

      POST_INSERT_SCRIPT=>"",

      IGNORE_REPORT_COLS=>[qw(jpegPhoto)],
};
